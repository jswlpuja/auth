syntax="proto3";
package v1;




import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "User service";
		version: "1.0";
		
  };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

message User {

    string emailID=2;
    string password=3;
    string firstName =4;
    string lastName=5;
    string mobileNumber=7;
}

message RegistrationRequest{
 string apiVersion =1;
 User user=2;

}


message RegistrationResponse {
    string message =1;
}
message LoginRequest{
    string apiVersion= 1;
    string emailID=2;
    string password=3;
}

message LoginResponse{
    string status=1;
    string refreshToken=2;
    string accessToken=3;
}


message HomeRequest{
    string apiVersion=1;
}

message HomeResponse{
    string message=1;
}

message LoginWithOTPRequest{
    string apiVersion= 1;
    string emailID=2;
}

message LoginWithOTPResponse{
    string message=1;
}

message VerifyOTPRequest{
    string apiVersion=1;
    string emailID =3;
    string  OTP=2;
}

message VerifyOTPResponse{
    string accessToken=1;
   string  refreshToken=2;
}
message ResetPasswordRequest{
    string apiVersion=1;
    string emailID=2;
    string password=3;
    string OTP=4;
}
message ResetPasswordResponse{
    string accessToken=1;
    string refreshToken=2;
}

message AccessTokenAndRefreshTokenRequest{
    string apiVersion=1;
    string accessToken=2;
    string refreshToken=3;
}


message AccessTokenAndRefreshTokenResponse{
    string accessToken=1;
    string refreshToken=2;
}
service UserService {

    rpc RequestTokens (AccessTokenAndRefreshTokenRequest) returns (AccessTokenAndRefreshTokenResponse){

        option (google.api.http) = {
            post: "/v1/request-tokens"
            body: "*"
        };
    }

    rpc ResetPassword (ResetPasswordRequest) returns(ResetPasswordResponse){

        option (google.api.http) = {
            post: "/v1/password-rest"
            body: "*"
        };

    }

    rpc VerifyOTP (VerifyOTPRequest) returns (VerifyOTPResponse){

        option (google.api.http) = {
            post: "/v1/login/otp/verify"
            body: "*"
        };
    }



    rpc OTP (LoginWithOTPRequest) returns (LoginWithOTPResponse){

        option (google.api.http) = {
            post: "/v1/login/otp"
            body: "*"
        };
    }

    rpc Login (LoginRequest) returns (LoginResponse){

        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
    }

    rpc Home(HomeRequest) returns (HomeResponse){

        option (google.api.http) = {
            get: "/v1/home"
        };
        

    }

    rpc Register (RegistrationRequest) returns (RegistrationResponse){

        option (google.api.http) = {
            post: "/v1/register"
            body: "*"
        };
    }

}